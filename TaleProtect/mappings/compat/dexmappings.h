#ifndef BSWRAPPER_DEXMAPPINGS_H
#define BSWRAPPER_DEXMAPPINGS_H

//#include <string>
//#include <vector>
//#include <android/log.h>
#include <jni.h>

extern jclass nzijsy_aq_class;
extern jclass nzijsy_ay_class;
extern jclass nzijsy_aC_class;
extern jclass nzijsy_J_class;
extern jclass nzijsy_az_class;

static const char *stringTable[] = {
        "ThermalMonitorThread",
        "NativeHTTPConnection",
        "NativeHTTPConnection.copyFile",
        "POST",
        "Content-Type",
        "application/x-www-form-urlencoded",
        "charset",
        "utf-8",
        "Connection",
        "close",
        "GET",
        "SHA-1",
        "download",
        ".tmp",
        "NativeHTTPConnection",
        "NativeHTTPConnection.doGet error creating SHA1",
        "%02x",
        "NativeHTTPConnection.doGet sha1 hashes of file don't match:",
        "NativeHTTPConnection.doGet Problem getting file hash",
        "NativeHTTPConnection.doGet Couldn't rename temp file",
        "NativeHTTPConnection.doGet Couldn't 'rename' the file by copying it either",
        "NativeHTTPConnection.doGet Was unable to delete temp file",
        "X-timestamp",
        "NativeHTTPConnection",
        "NativeHTTPConnection.run get/download FAIL",
        "NativeHTTPConnection.run POST IOException",
        "NativeHTTPConnection.run POST FAIL",
        "Thermal status ",
        "default",
        "Thermal shutdown. Status when app launched ",
        ". Status when foregrounded ",
        "device_name",
        "",
        "FirebaseService",
        "FCM Fetching registration token failed",
        "Fetching registration token failed",
        "AppUpdater",
        "Failure when retrieving AppUpdateInfo",
        "âœ”",
        "",
        "input_method",
        "input_method",
        "",
        "tcfDataAfter",
        "",
        "android.hardware.telephony.data",
        "phone",
        "connectivity",
        "phone",
        "",
        "connectivity",
        "window.bridge = window.bridge || {};window.bridge.",
        " = ",
        "function(params = '') { return bridge.postMessage(\"",
        "\", params); }",
        ";",
        "text/html",
        "delete window.bridge.",
        ";",
        "delete window.bridge.",
        ";",
        "window.bridge = window.bridge || {};window.bridge.",
        " = ",
        ";",
        "window.__bridgeCallbacks['",
        "']('",
        "');delete window.__bridgeCallbacks['",
        "'];",
        "about:blank",
        "$recyclerView",
        "messageHandler",
        "about:blank",
        "input_method",
        "In-app Support",
        "fcm_fallback_notification_channel",
        "fcm_fallback_notification_channel",
        "",
        "In-app Support",
        "In-app Support",
        "UTF-8",
        "localNotifications",
        "",
        "localNotifications",
        "userId",
        "sound",
        "title",
        "imageURL",
        "msg",
        "id",
        "channelId",
        "channelName",
        "channelDesc",
        "color",
        "GameApp",
        "GameApp.cancelAllNotifications()",
        "localNotifications",
        "",
        "id",
        "userId",
        "sound",
        "title",
        "imageURL",
        "channelId",
        "channelName",
        "channelDesc",
        "color",
        "msg",
        "localNotifications",
        "localNotifications",
        "GameApp",
        "Gameapp.cancelNotification()",
        "com.supercell.clashroyale",
        "Alarm fire time is in the past fireTime=",
        " timeNow=",
        " id=",
        "/shared_prefs/localPrefs-plain.xml",
        "msg",
        "id",
        "title",
        "sound",
        "userId",
        "imageURL",
        "channelId",
        "channelName",
        "channelDesc",
        "color",
        "GameApp",
        "debuggerException",
        "GameApp.debuggerWarning:",
        "GameApp",
        "com.huawei.android.util.HwNotchSizeUtil",
        "getNotchSize",
        "com.huawei.android.util.HwNotchSizeUtil",
        "hasNotchInScreen",
        "EnabledFeatures",
        "com.supercell.titan.BuildConfig",
        "BuildConfig does not have field EnabledFeatures, for checking if '",
        "' is enabled.",
        "GameApp",
        "audio",
        "android.settings.APP_NOTIFICATION_SETTINGS",
        "android.provider.extra.APP_PACKAGE",
        "app_package",
        "app_uid",
        "GameApp",
        "reloadApp",
        "vibrator",
        "GameApp",
        "GameApp.vibrateDevice()",
        "GameApp",
        "sc_manifest_package_name",
        ".BuildConfig",
        "sc_manifest_package_name not found from project resources. Please add it for getBuildConfigFromGame() to work. ",
        "Cannot find value for project BuildConfig key: ",
        "integer",
        "",
        "",
        "",
        "",
        "",
        "string",
        "GameApp.getStringResourceByName unable to find String with id:",
        "GameApp",
        "",
        "dsn",
        "sentry_preferences",
        "/crashreport.dsn/",
        "/",
        "GameApp",
        "Sentry custom dsn handling failed: ",
        "wifi",
        "notification",
        "GameApp",
        "com.linecorp.nova.android.NovaNative",
        "setActivity",
        "loadNativeModules",
        "Nova sdk not initialised NoSuchMethodException: ",
        "Nova sdk not initialised InvocationTargetException: ",
        "Nova sdk not initialised IllegalAccessException: ",
        "Nova sdk not initialised ClassNotFoundException: ",
        "window",
        "googleplay_clientid",
        "this game",
        "app_name",
        "NativeDialog",
        "wifi",
        "alarm",
        "6.0",
        "",
        "storage",
        "titan",
        "localPrefs-plain",
        "localNotifications",
        "localPrefs",
        "storage_new",
        "com.oppo.feature.screen.heteromorphism",
        "input_method",
        "com.supercell.titan.AppUpdater",
        "checkUpdate",
        "display",
        "Game has created ridiculous amount of notifications count=",
        "/shared_prefs/localPrefs-plain.xml",
        "title",
        "sound",
        "msg",
        "userId",
        "id",
        "imageURL",
        "",
        "GameApp",
        "onStop()",
        "localNotifications",
        "localNotifications",
        "GameApp",
        "Cannot remove activity event listener from empty list.",
        "GameApp",
        "GameApp.requestBackup",
        "runOnView when view = null, ",
        "android.intent.action.VIEW",
        "com.android.vending",
        "https://play.google.com/d?id=",
        "&referrer=",
        "overlay",
        "callerId",
        "https://play.google.com/store/apps/details?id=",
        "power",
        "unknown",
        "shutdown",
        "emergency",
        "critical",
        "severe",
        "moderate",
        "light",
        "none",
        "not available",
        "power",
        "power",
        "QUAGO_APP_TOKEN",
        "PlayerId",
        "Looper must not be null.",
        "title",
        "title",
        "(",
        "description",
        "title",
        "price",
        "price_currency_code",
        "Google BillingClient querySkuDetailsAsync failed with responseCode:",
        " message:",
        "this$0",
        "$activity",
        "$status",
        "$tcfDataBefore",
        "context",
        "callback",
        "Usercentrics is still initializing. Please, check if you are trying to show the UI before the `isReady` was invoked.",
        "tcfDataBefore",
        "",
        "",
        "{GAME}",
        "OK",
        "Uninstall",
        "error",
        "Not ready at showDialog(). Reason: ",
        "UsercentricsSDK",
        "ic_notification",
        "drawable",
        "notificationIcon",
        "enableInAppNotification",
        "enableLogging",
        "screenOrientation",
        "Helpshift",
        "setHelpshiftEventsListener() is called.",
        "HelpshiftTitan",
        "HelpshiftTitan.start",
        "status",
        "title",
        "message",
        "button",
        "button2",
        "button3",
        "id",
        "NativeDialog",
        ",",
        "[",
        "activity",
        "onSuccess",
        "onError",
        "activity",
        "auto",
        "Discarding data. Failed to send event to service to bundle",
        "Failed to send event to the service to bundle",
        "Failed to get trigger URIs; not connected to service",
        "Failed to get trigger URIs; remote exception",
        "Not bundling data. Service unavailable or out of date",
        "MBServiceCompat",
        "removeSubscription for callback that isn't registered id=",
        "removeSubscription called for ",
        " which is not subscribed",
        "userName",
        "userId",
        "userEmail",
        "userAuthToken",
        "Logging in the user: ",
        "Helpshift",
        "HelpshiftTitan",
        "HelpshiftTitan.login",
        "HelpshiftTitan",
        "HelpshiftTitan.showFAQ",
        "HelpshiftTitan",
        "HelpshiftTitan.showConversation",
        "setLanguage() is called for language - ",
        "Helpshift",
        "HelpshiftTitan",
        "HelpshiftTitan.setSDKLanguage",
        "leaveBreadCrumb() is called with action ",
        "Helpshift",
        "HelpshiftTitan",
        "HelpshiftTitan.leaveBreadcrumb",
        "Registering push token, token is empty?- ",
        "Helpshift",
        "HelpshiftTitan",
        "HelpshiftTitan.setPushNotificationToken",
        "drawable",
        "notification",
        "",
        "userId",
        "default",
        "ic_notification",
        "Could not download image from ",
        ". Error: ",
        "TimeAlarm",
        "ic_icon",
        "res/",
        "\\.wav",
        "\\.ogg",
        "\\.caf",
        ".assetprovider",
        "content://",
        "/",
        "GET",
        "app_name",
        "string",
        "title",
        "msg",
        "sound",
        "id",
        "userId",
        "imageURL",
        "channelId",
        "channelName",
        "channelDesc",
        "color",
        "UTF-8",
        "",
        "",
        "SecurePreferences",
        "UTF-8",
        "Unable to create String from decrypted value",
        "SecurePreferences.decrypt Unable to decrypt value",
        "SecurePreferences.decrypt Base64.decode fail",
        "",
        "fldsjfodasjifudslfjdsaofshaufihadsf",
        "SHA-256",
        "UTF-8",
        "AES/CBC/PKCS5Padding",
        "UTF-8",
        "UTF-8",
        "UTF-8",
        "this$0",
        "ScreenshotRecorder is paused, not capturing screenshot",
        "Content hasn't changed, repeating last known frame",
        "Window is invalid, not capturing screenshot",
        "runnable",
        "Root view is invalid, not capturing screenshot",
        "$this_apply",
        "swap",
        "null cannot be cast to non-null type java.util.ArrayList<android.view.View>{ kotlin.collections.TypeAliasesKt.ArrayList<android.view.View> }",
        "<this>",
        "this$0",
        "options",
        ".scope-cache",
        "replay.json",
        "",
        "replayId",
        "replay_",
        "SentryOptions.cacheDirPath is not set, session replay is no-op",
        ".ongoing_segment",
        "No ongoing segment found for replay: %s",
        "=",
        "config.height",
        "config.width",
        "config.frame-rate",
        "config.bit-rate",
        "segment.id",
        "segment.timestamp",
        "replay.type",
        "No frames found for replay: %s, deleting the replay",
        "comparator",
        "{\n                // in â€¦.timestamp)\n            }",
        "replay.recording",
        "replay.screen-at-start",
        "Incorrect segment values found for replay: %s, deleting the replay",
        "breadcrumbs.json",
        "hint",
        "unregisterNetworkCallback failed",
        "NetworkBreadcrumbsIntegration removed.",
        "$this_apply",
        "this$0",
        "this$0",
        "this$0",
        "this$0",
        "Emitter",
        "TAG",
        "Received error during emission process: %s",
        "Service took too long to process intent: ",
        " finishing.",
        "FirebaseMessaging",
        "error",
        "Error clearing Usercentrics user session. Reason: ",
        "UsercentricsSDK",
        "<anonymous parameter 0>",
        "messageHandler",
        "TitanWebView",
        "Webview unavailable on the device",
        "UTF-8",
        "",
        "trace.json",
        "default",
        "auto",
        "$task",
        "$options",
        "$taskName",
        "Failed to execute task ",
        "this$0",
        "Failed to capture replay recording",
        ",",
        ": ",
        "function(params = '') { return bridge.postMessage(\"",
        "\", params); }",
        "Transport backend '",
        "' is not registered",
        "Error scheduling event ",
        "$impl",
        "$lastInEpicenterRect",
        "this$0",
        "inFragment",
        "outFragment",
        "sharedElements",
        "$container",
        "this$0",
        "EmojiCompat font provider not available on this device.",
        "PreferencesBackupAgent.onCreate",
        "PreferencesBackupAgent",
        "storage",
        "storage_new",
        "app_prefs",
        "",
        "error",
        "Not ready at getConsentOrShowDialog(). Reason: ",
        "UsercentricsSDK",
        "status",
        "Default data collection state already set to",
        "Default data collection is different than actual status",
        "",
        "NativeHTTPClientManager",
        "http fail",
        "android.intent.action.SEND",
        "text/plain",
        "android.intent.extra.TEXT",
        "android.intent.action.SEND",
        "text/plain",
        "android.intent.extra.SUBJECT",
        "android.intent.extra.TEXT",
        "wifi",
        "title",
        "button",
        "button2",
        "button3",
        "message",
        "id",
        "PurchaseManagerGoogle",
        "buyProductImplementation when billingInitResult != OK",
        "PurchaseManagerGoogle",
        "buyProductImplementation: cannot find ProductDetails",
        "ProductDetails is required for constructing ProductDetailsParams.",
        "offerToken is required for constructing ProductDetailsParams for subscriptions.",
        "Purchase token must be set",
        "PurchaseManagerGoogle",
        "Finishing unknown transaction",
        "updateDetailsImplementation() when billingInitResult.getResponseCode() ==",
        "PurchaseManagerGoogle",
        "No Billing service available",
        "Unable to create logging payload",
        "BillingLogger",
        "first_party",
        "Product type must be provided.",
        "Product id must be provided.",
        "Serialized doc id must be provided for first party products.",
        "play_pass_subs",
        "All products should be of the same product type.",
        "Product list cannot be empty.",
        "Product list must be set to a non empty list.",
        "inapp",
        "SKU list must be set",
        "SKU type must be set",
        "",
        "",
        "",
        "LAST_APPUPDATE_REQUESTED",
        "APP_UPDATE_REQUESTED_TIME (",
        ") is in invalid format",
        "AppUpdater",
        "PlayCore",
        "onError(%d)",
        "requestUpdateInfo(%s)",
        "fb://",
        "com.facebook.katana",
        "android.intent.action.VIEW",
        "android_id",
        "",
        "",
        "",
        "",
        "",
        "",
        "[A-Z]{2}",
        "",
        "",
        "activity",
        "",
        "-",
        "SERVER_ENVIRONMENT",
        "",
        "/proc/meminfo",
        "\\s+",
        "android.hardware.audio.low_latency",
        "android.hardware.audio.pro",
        "market://details?id=",
        "android.intent.action.VIEW",
        "https://",
        "android.intent.action.VIEW",
        "http://",
        "hockeyapp://",
        "market://",
        "line://",
        "mailto:",
        "android.intent.action.SENDTO",
        "Send email",
        "settings://",
        "fb://",
        "market://play.google.com/store/apps/details?id=",
        "market://details?id=",
        "ApplicationUtil",
        "Error getting paste string data",
        "",
        "",
        "",
        "android.permission.ACCESS_FINE_LOCATION",
        "NetworkBreadcrumbsIntegration installed.",
        "NetworkBreadcrumbs",
        "NetworkBreadcrumbsIntegration not installed.",
        "LocationService",
        "network",
        "gps",
        "LocationService.startLocationTracking.run mProvider = null",
        "Security Exception while starting tracking location",
        "LocationService",
        "Security Exception while stopping tracking location",
        "requestUnreadMessageCount is called with shouldFetchFromServer = true",
        "Helpshift",
        "HelpshiftTitan",
        "HelpshiftTitan.requestNotificationCount",
        "app_launch_last_sync_timestamp",
        "migration_state",
        "failure_logs_synced",
        "EmojiCompat.EmojiCompatInitializer.run",
        "Google BillingClient queryProductDetailsAsync failed with responseCode:",
        " message:",
        "ApplicationUtil",
        "",
        "GooglePlayServicesNotAvailableException null message",
        "GooglePlayServicesNotAvailableException",
        "IOException null message",
        "IOException",
        "fullPrivacy",
        "customMetadata",
        "tags",
        "customIssueFields",
        "initialUserMessage",
        "enableContactUs",
        "AFTER_MARKING_ANSWER_UNHELPFUL",
        "AFTER_VIEWING_FAQS",
        "NEVER",
        "ALWAYS",
        "alert",
        "type",
        "value",
        "type",
        "value",
        ",",
        ",",
        "sl",
        "singleline",
        "ml",
        "multiline",
        "n",
        "number",
        "dd",
        "dropdown",
        "dt",
        "date",
        "b",
        "checkbox",
        "HelpshiftTitan",
        "Cannot start Helpshift, GameApp instance is null",
        "",
        "",
        "FirebaseService",
        "Firebase not initialized",
        "Player didn't grant push notification permission",
        "android.permission.POST_NOTIFICATIONS",
        "android.permission.POST_NOTIFICATIONS",
        "android.permission.POST_NOTIFICATIONS",
        "from",
        "google.",
        "gcm.",
        "message_type",
        "collapse_key",
        "origin",
        "helpshift",
        "FirebaseService",
        "Cannot handle Helpshift push message, GameApp instance is null",
        "userId",
        "channelId",
        "channelName",
        "channelDesc",
        "imageURL",
        "color",
        "",
        "Google BillingClient billing result was unhandled with code: ",
        " and message: ",
        "inapp",
        "BillingClient",
        "Please provide a valid product type.",
        "PurchaseManagerGoogle",
        "getPendingPurchases() billingInitResult != BillingClient.BillingResponseCode.OK",
        "location_mode",
        "LocationService",
        "Error checking location mode",
        "LocationService",
        "Did not get permissions, can't listen for location. Permission:",
        "LocationService",
        "Call has thrown an exception",
        "TitanApplication",
        "sentry",
        "sentry-android",
        "UnsatisfiedLinkError loading sentry",
        "fmod",
        "fmodL",
        "UnsatisfiedLinkError loading fmod",
        "UnsatisfiedLinkError loading fmodL",
        "g",
        "UnsatisfiedLinkError libg",
        "Invalid level: ",
        "WARNING: ",
        "consent",
        "\n\t\t\t\t{\n\t\t\t\t\t\"templateId\": \"",
        "\",\n\t\t\t\t\t\"status\": ",
        ",\n\t\t\t\t\t\"isEssential\": ",
        ",\n\t\t\t\t\t\"version\": \"",
        "\"\n\t\t\t\t}\n\t\t\t",
        "$context",
        "$options",
        "context",
        "options",
        "Error getting Usercentrics metadata: ",
        "UsercentricsInitializer",
        "context",
        "",
        "",
        "latest",
        "com.supercell.titan.usercentrics.ruleset_id",
        "<set-?>",
        "UsercentricsInitializer",
        "Error initializing Usercentrics. Initializing without ruleset id. Please add ruleset id for key com.supercell.titan.usercentrics.ruleset_id meta-data of AndroidManifest.xml.",
        "android.settings.APPLICATION_DETAILS_SETTINGS",
        "package"
};
static const size_t stringTable_count = sizeof(stringTable) / sizeof(stringTable[0]);

// ========================= [ promon-bypass ] =========================

//#define LOG_TAG "NativeRegister"
//#define DM_LOGI(...) __android_log_print(ANDROID_LOG_INFO, LOG_TAG, __VA_ARGS__)
//#define DM_LOGE(...) __android_log_print(ANDROID_LOG_ERROR, LOG_TAG, __VA_ARGS__)
//#define DM_LOGI(...)
//#define DM_LOG(...)
//#define DM_LOGE(...)
//#define DM_ERR(...)

//#define DM_DM_LOGI(...) __android_log_print(ANDROID_LOG_INFO, LOG_TAG, __VA_ARGS__)
//#define DM_DM_LOGE(...) __android_log_print(ANDROID_LOG_ERROR, LOG_TAG, __VA_ARGS__)
//#define DM_DM_LOGI(...)
//#define DM_DM_LOG(...)
//#define DM_DM_LOGE(...)
//#define DM_DM_ERR(...)

#include <jni.h>
//#include <atomic>
//#include "../tale-protect.hpp"

//static std::atomic<uint64_t> skew_a_str{0};
//static std::atomic<uint64_t> skew_a_cls{0};

//extern "C" {
// jwj.N.a(int) : String
jstring nzijsy_aq_a_get_string(JNIEnv *env, jobject reserved, jint index);

// Function to get string by index
void setStaticInt(JNIEnv *env, jclass clazz, const char *name, int value);

// Set a static String field
void setStaticString(JNIEnv *env, jclass clazz, const char *name, const char *value);

#include <jni.h>
#include <stdbool.h>

// Set a static boolean field
void setStaticBoolean(JNIEnv *env, jclass clazz, const char *name, bool value);

// Set a static object field of any type
void
setStaticObject(JNIEnv *env, jclass clazz, const char *name, jobject obj, const char *typeSig);

// Create a java.util.ArrayList from a vector of C strings
jobject createArrayList(JNIEnv *env, const char **items, size_t count);

// Create java.util.concurrent.atomic.AtomicBoolean
//__attribute__((unused)) jobject createAtomicBoolean(JNIEnv *env, bool value);

// Get a companion object (static field) from a class
jobject getCompanionObject(JNIEnv *env, const char *className, const char *fieldName,
                           const char *fieldSig);


void
nzijsy_aq_a_initialize_class(JNIEnv *env, jobject /*thisObj*/reserved, jclass clazz, jint code);


jbyteArray nzijsy_aC_a__getAppAttestationResponseToken(JNIEnv *env, jobject reserved_obj_arg,
                                                       jbyteArray client_session_arg);

jboolean nzijsy_J_d__bollocks(JNIEnv *env, jobject reserved_obj_arg);

void nzijsy_J_b_bollocks(JNIEnv *env, jobject reserved_obj_arg, jobject obj_arg);

void nzijsy_az_a__spyware_1(JNIEnv *env, jobject reserved_obj_arg, jobject obj_arg);

void nzijsy_az_b__spyware_1(JNIEnv *env, jobject reserved_obj_arg, jobject context_obj_arg,
                            jobject obj_arg);

void nzijsy_ay_a__spyware_0(JNIEnv *env, jobject reserved_obj_arg, jclass clazz_arg, jint code_arg);

//}

static JNINativeMethod nzijsy_aq_methods[] = {
        {"a", "(I)Ljava/lang/String;", (void *) nzijsy_aq_a_get_string},
        {"a", "(Ljava/lang/Class;I)V", (void *) nzijsy_aq_a_initialize_class}
};

static JNINativeMethod nzijsy_ay__spyware_0_methods[] = { // done
        {"a", "(Ljava/lang/Class;I)V", (void *) nzijsy_ay_a__spyware_0}
};

static JNINativeMethod nzijsy_az__spyware_1_methods[] = { // done
        {"a", "(Lgobvpmes/M;)V",                          (void *) nzijsy_az_a__spyware_1},
        {"b", "(Landroid/content/Context;Lgobvpmes/M;)V", (void *) nzijsy_az_b__spyware_1}
};

static JNINativeMethod nzijsy_J__bollocks_methods[] = { // done
        {"d", "()Z",      (void *) nzijsy_J_d__bollocks},
        {"a", "(Lgobvpmes/K;)V", (void *) nzijsy_J_b_bollocks}
};

static JNINativeMethod nzijsy_aC__getAppAttestationResponseToken_methods[] = { // done
        {"a", "([B)[B", (void *) nzijsy_aC_a__getAppAttestationResponseToken}
};

void *registration_thread_func(void *arg);

jint dexmappings_save_ref(JavaVM *vm_arg);

#endif //BSWRAPPER_DEXMAPPINGS_H

